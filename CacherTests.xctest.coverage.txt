/Users/aashish.tamsya/Desktop/MindValley-Challenge/CacherTests/CacheTests/CacheTests.swift:
    1|       |//
    2|       |//  CacheTests.swift
    3|       |//  CacherTests
    4|       |//
    5|       |//  Created by Aashish Tamsya on 24/06/19.
    6|       |//  Copyright © 2019 Aashish Tamsya. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Cacher
   11|       |
   12|       |final class CacheTests: XCTestCase {
   13|      0|  func test_imageURL_caching_onMemory() {
   14|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg"),
   15|      0|      let image = try? UIImage(data: Data(contentsOf: imageURL)),
   16|      0|      let key = imageURL.key else {
   17|      0|      XCTAssert(false, "no image at url")
   18|      0|      return
   19|      0|    }
   20|      0|    let expectation = self.expectation(description: "Testing caching of image from url and retrieving it back from cache.")
   21|      0|    let cache = Cacher.sharedCache
   22|      0|    cache.store((.memory, key), object: image) {
   23|      0|      cache.retrieve(from: .memory, key: key) { (image: UIImage?) in
   24|      0|        XCTAssert(image != nil, "no image")
   25|      0|        expectation.fulfill()
   26|      0|      }
   27|      0|    }
   28|      0|    waitForExpectations(timeout: 60, handler: nil)
   29|      0|  }
   30|       |  
   31|      0|  func test_imageURL_caching_onDisk() {
   32|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg"),
   33|      0|      let key = imageURL.key else {
   34|      0|        XCTAssert(false, "no json file at url")
   35|      0|        return
   36|      0|    }
   37|      0|    let expectation = self.expectation(description: "Testing caching of Image file from url and retrieving it back from cache.")
   38|      0|    let cache = Cacher.sharedCache
   39|      0|    _ = cache.download(cacheType: .disk, url: imageURL) { (object: Data?, cacheType) in
   40|      0|      cache.retrieve(from: .disk, key: key) { (data: Data?) in
   41|      0|        XCTAssert(data != nil, "no image file data")
   42|      0|        expectation.fulfill()
   43|      0|      }
   44|      0|    }
   45|      0|    waitForExpectations(timeout: 60, handler: nil)
   46|      0|  }
   47|       |  
   48|      0|  func test_disk_store() {
   49|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg"),
   50|      0|      let image = try? UIImage(data: Data(contentsOf: imageURL)),
   51|      0|      let key = imageURL.key else {
   52|      0|        XCTAssert(false, "no json file at url")
   53|      0|        return
   54|      0|    }
   55|      0|    let expectation = self.expectation(description: "Testing caching of Image file from url and retrieving it back from cache.")
   56|      0|    let cache = Cacher.sharedCache
   57|      0|    cache.store((.disk, key), object: image) {
   58|      0|      cache.retrieve(from: .disk, key: key) { (data: Data?) in
   59|      0|        XCTAssert(data != nil, "no image file data")
   60|      0|        expectation.fulfill()
   61|      0|      }
   62|      0|    }
   63|      0|    waitForExpectations(timeout: 60, handler: nil)
   64|      0|  }
   65|       |  
   66|      0|  func test_performance_imageURL_caching_onMemory() {
   67|      0|    measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
   68|      0|      guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg"),
   69|      0|        let image = try? UIImage(data: Data(contentsOf: imageURL)),
   70|      0|        let key = imageURL.key else {
   71|      0|          XCTAssert(false, "no image at url")
   72|      0|          return
   73|      0|      }
   74|      0|      let expectation = self.expectation(description: "Performance testing caching of image from url and retrieving it back from cache.")
   75|      0|      let cache = Cacher.sharedCache
   76|      0|      startMeasuring()
   77|      0|      cache.store((.memory, key), object: image) {
   78|      0|        cache.retrieve(from: .memory, key: key) { (image: UIImage?) in
   79|      0|          XCTAssert(image != nil, "no image")
   80|      0|          expectation.fulfill()
   81|      0|        }
   82|      0|      }
   83|      0|      waitForExpectations(timeout: 60, handler: { _ in
   84|      0|        self.stopMeasuring()
   85|      0|      })
   86|      0|    }
   87|      0|  }
   88|       |  
   89|      0|  func test_cacher_download_onMemoryCache() {
   90|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg") else {
   91|      0|      XCTAssert(false, "no image at url")
   92|      0|      return
   93|      0|    }
   94|      0|    let cache = Cacher.sharedCache
   95|      0|    _ = cache.download(cacheType: .memory, url: imageURL) { (object: Data?, _) in
   96|      0|      XCTAssert(object != nil, "no data found")
   97|      0|    }
   98|      0|  }
   99|       |  
  100|      0|  func test_cacher_download_onDisk() {
  101|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg") else {
  102|      0|      XCTAssert(false, "no image at url")
  103|      0|      return
  104|      0|    }
  105|      0|    let cache = Cacher.sharedCache
  106|      0|    _ = cache.download(cacheType: .disk, url: imageURL) { (object: Data?, _) in
  107|      0|      XCTAssert(object != nil, "no data found")
  108|      0|    }
  109|      0|  }
  110|       |  
  111|      0|  func test_cacher_download_cancel() {
  112|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg") else {
  113|      0|      XCTAssert(false, "no image at url")
  114|      0|      return
  115|      0|    }
  116|      0|    let cache = Cacher.sharedCache
  117|      0|    let token = cache.download(cacheType: .memory, url: imageURL) { (object: Data?, _) in
  118|      0|    }
  119|      0|    XCTAssert(cache.cancel(imageURL, token: token), "Cancel Error")
  120|      0|  }
  121|       |  
  122|      0|  func test_cacher_memory_removeAll() {
  123|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg"),
  124|      0|      let image = try? UIImage(data: Data(contentsOf: imageURL)),
  125|      0|      let key = imageURL.key else {
  126|      0|        XCTAssert(false, "no image at url")
  127|      0|        return
  128|      0|    }
  129|      0|    let cache = Cacher.sharedCache
  130|      0|    cache.store((.memory, key), object: image) {
  131|      0|      cache.removeAll()
  132|      0|      cache.retrieve(from: .memory, key: key, { (object: UIImage?) in
  133|      0|        XCTAssert(object == nil, "Cache not cleared.")
  134|      0|      })
  135|      0|    }
  136|      0|  }
  137|       |}

/Users/aashish.tamsya/Desktop/MindValley-Challenge/CacherTests/CacheTests/CacheTypeTests.swift:
    1|       |//
    2|       |//  CacheTypeTests.swift
    3|       |//  CacherTests
    4|       |//
    5|       |//  Created by Aashish Tamsya on 27/06/19.
    6|       |//  Copyright © 2019 Aashish Tamsya. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Cacher
   11|       |
   12|       |final class CacheTypeTests: XCTestCase {
   13|      0|  func test_cacheType_forDisk() {
   14|      0|    XCTAssert(CacheType.disk.isCached == true, "Disk type")
   15|      0|  }
   16|       |  
   17|      0|  func test_cacheType_forMemory() {
   18|      0|    XCTAssert(CacheType.memory.isCached == true, "Disk type")
   19|      0|  }
   20|       |}

/Users/aashish.tamsya/Desktop/MindValley-Challenge/CacherTests/CacheTests/JSONCacheTests.swift:
    1|       |//
    2|       |//  JSONCacheTests.swift
    3|       |//  CacherTests
    4|       |//
    5|       |//  Created by Aashish Tamsya on 27/06/19.
    6|       |//  Copyright © 2019 Aashish Tamsya. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Cacher
   11|       |
   12|       |final class JSONCacheTests: XCTestCase {
   13|      0|  func test_jsonURL_caching_toMemory() {
   14|      0|    guard let jsonURL = URL(string: "https://support.oneskyapp.com/hc/en-us/article_attachments/202761627/example_1.json"),
   15|      0|      let key = jsonURL.key,
   16|      0|      let jsonData = try? Data(contentsOf: jsonURL) else {
   17|      0|        XCTAssert(false, "no json file at url")
   18|      0|        return
   19|      0|    }
   20|      0|    let expectation = self.expectation(description: "Testing caching of JSON file from url and retrieving it back from cache.")
   21|      0|    let cache = Cacher.sharedCache
   22|      0|    cache.store((.memory, key), object: jsonData) {
   23|      0|      cache.retrieve(from: .memory, key: key) { (data: Data?) in
   24|      0|        XCTAssert(data != nil, "no json file data")
   25|      0|        expectation.fulfill()
   26|      0|      }
   27|      0|    }
   28|      0|    waitForExpectations(timeout: 60, handler: nil)
   29|      0|  }
   30|       |  
   31|      0|  func test_jsonURL_caching_toDisk() {
   32|      0|    guard let jsonURL = URL(string: "https://support.oneskyapp.com/hc/en-us/article_attachments/202761627/example_1.json"),
   33|      0|      let key = jsonURL.key,
   34|      0|      let jsonData = try? Data(contentsOf: jsonURL) else {
   35|      0|        XCTAssert(false, "no json file at url")
   36|      0|        return
   37|      0|    }
   38|      0|    let expectation = self.expectation(description: "Testing caching of JSON file from url and retrieving it back from cache.")
   39|      0|    let cache = Cacher.sharedCache
   40|      0|    cache.store((.disk, key), object: jsonData) {
   41|      0|      cache.retrieve(from: .disk, key: key) { (data: Data?) in
   42|      0|        XCTAssert(data != nil, "no json file data")
   43|      0|        expectation.fulfill()
   44|      0|      }
   45|      0|    }
   46|      0|    waitForExpectations(timeout: 60, handler: nil)
   47|      0|  }
   48|       |  
   49|      0|  func test_jsonURL_downloading_caching_toDisk() {
   50|      0|    guard let jsonURL = URL(string: "https://support.oneskyapp.com/hc/en-us/article_attachments/202761627/example_1.json"),
   51|      0|      let key = jsonURL.key else {
   52|      0|        XCTAssert(false, "no json file at url")
   53|      0|        return
   54|      0|    }
   55|      0|    let expectation = self.expectation(description: "Testing caching of JSON file from url and retrieving it back from cache.")
   56|      0|    let cache = Cacher.sharedCache
   57|      0|    _ = cache.download(cacheType: .disk, url: jsonURL) { (object: Data?, cacheType) in
   58|      0|      cache.retrieve(from: .disk, key: key) { (data: Data?) in
   59|      0|        XCTAssert(data != nil, "no json file data")
   60|      0|        expectation.fulfill()
   61|      0|      }
   62|      0|    }
   63|      0|    waitForExpectations(timeout: 60, handler: nil)
   64|      0|  }
   65|       |  
   66|       |}

/Users/aashish.tamsya/Desktop/MindValley-Challenge/CacherTests/ExtensionTests/DataExtensionTests.swift:
    1|       |//
    2|       |//  DataExtensionTests.swift
    3|       |//  CacherTests
    4|       |//
    5|       |//  Created by Aashish Tamsya on 28/06/19.
    6|       |//  Copyright © 2019 Aashish Tamsya. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Cacher
   11|       |
   12|       |final class DataExtensionTests: XCTestCase {
   13|      0|  func test_decoding_ofData_cachable() {
   14|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg"),
   15|      0|      let data = try? Data(contentsOf: imageURL) else {
   16|      0|        XCTAssert(false, "no image at url")
   17|      0|        return
   18|      0|    }
   19|      0|    XCTAssert(Data.decode(data) != nil, "Data confirms to Cachable.")
   20|      0|  }
   21|       |}

/Users/aashish.tamsya/Desktop/MindValley-Challenge/CacherTests/ExtensionTests/UIImageExtensionTests.swift:
    1|       |//
    2|       |//  UIImageExtensionTests.swift
    3|       |//  CacherTests
    4|       |//
    5|       |//  Created by Aashish Tamsya on 28/06/19.
    6|       |//  Copyright © 2019 Aashish Tamsya. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Cacher
   11|       |
   12|       |final class UIImageExtensionTests: XCTestCase {
   13|       |
   14|      0|  func test_image_decodeable() {
   15|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg"),
   16|      0|      let data = try? Data(contentsOf: imageURL) else {
   17|      0|        XCTAssert(false, "no image at url")
   18|      0|        return
   19|      0|    }
   20|      0|    XCTAssert(UIImage.decode(data) != nil, "UIImage doesn't confirm to Cachable.")
   21|      0|  }
   22|       |  
   23|      0|  func test_image_encode() {
   24|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg"),
   25|      0|      let image = try? UIImage(data: Data(contentsOf: imageURL)) else {
   26|      0|        XCTAssert(false, "no image at url")
   27|      0|        return
   28|      0|    }
   29|      0|    XCTAssert(image.encode() != nil, "UIImage doesn't confirm to Cachable.")
   30|      0|  }
   31|       |  
   32|      0|  func test_png_image_hasAlpha() {
   33|      0|    guard let imageURL = URL(string: "http://pluspng.com/img-png/google-logo-png-google-logo-icon-png-transparent-background-1000.png"),
   34|      0|      let image = try? UIImage(data: Data(contentsOf: imageURL)) else {
   35|      0|        XCTAssert(false, "no image at url")
   36|      0|        return
   37|      0|    }
   38|      0|    XCTAssert(image.hasAlpha, "Image doesn't has alpha component.")
   39|      0|  }
   40|       |  
   41|      0|  func test_jpg_image_hasAlpha() {
   42|      0|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg"),
   43|      0|      let image = try? UIImage(data: Data(contentsOf: imageURL)) else {
   44|      0|        XCTAssert(false, "no image at url")
   45|      0|        return
   46|      0|    }
   47|      0|    XCTAssert(!image.hasAlpha, "Image doesn't has alpha component.")
   48|      0|  }
   49|       |}

/Users/aashish.tamsya/Desktop/MindValley-Challenge/CacherTests/ExtensionTests/UIImageViewExtensionTests.swift:
    1|       |//
    2|       |//  UIImageViewExtensionTests.swift
    3|       |//  CacherTests
    4|       |//
    5|       |//  Created by Aashish Tamsya on 24/06/19.
    6|       |//  Copyright © 2019 Aashish Tamsya. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Cacher
   11|       |
   12|       |final class UIImageViewExtensionTests: XCTestCase {
   13|      0|  func test_image_download_without_transition() {
   14|      0|    let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 160, height: 90))
   15|      0|    guard let url = URL(string: "https://images.unsplash.com/photo-1561312176-5aedf7172115?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=633&q=80") else {
   16|      0|      XCTAssert(false, "url error")
   17|      0|      return
   18|      0|    }
   19|      0|    let expectation = self.expectation(description: "Download image on UIImageView")
   20|      0|    _ = imageView.loadImage(withURL: url, placeholder: UIImage(named: "ic_pattern_placeholder")) { image in
   21|      0|      XCTAssert(image != nil, "no image")
   22|      0|      expectation.fulfill()
   23|      0|    }
   24|      0|    waitForExpectations(timeout: 60, handler: nil)
   25|      0|  }
   26|       |  
   27|      0|  func test_image_download_with_transition() {
   28|      0|    let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 160, height: 90))
   29|      0|    guard let url = URL(string: "https://images.unsplash.com/photo-1561312176-5aedf7172115?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=633&q=80") else {
   30|      0|      XCTAssert(false, "url error")
   31|      0|      return
   32|      0|    }
   33|      0|    let expectation = self.expectation(description: "Download image on UIImageView")
   34|      0|    _ = imageView.loadImage(withURL: url, placeholder: UIImage(named: "ic_pattern_placeholder"), transition: .fade(0.5)) { image in
   35|      0|      XCTAssert(image != nil, "no image")
   36|      0|      expectation.fulfill()
   37|      0|    }
   38|      0|    waitForExpectations(timeout: 60, handler: nil)
   39|      0|  }
   40|       |  
   41|      0|  func test_image_download_cancel() {
   42|      0|    let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 160, height: 90))
   43|      0|    guard let url = URL(string: "https://images.unsplash.com/photo-1561312176-5aedf7172115?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=633&q=80") else {
   44|      0|      XCTAssert(false, "url error")
   45|      0|      return
   46|      0|    }
   47|      0|    let token = imageView.loadImage(withURL: url) { image in
   48|      0|    }
   49|      0|    XCTAssert(imageView.cancelImageLoading(url, cancelToken: token), "Unable to cancel the request.")
   50|      0|  }
   51|       |}

/Users/aashish.tamsya/Desktop/MindValley-Challenge/CacherTests/NetworkTests/CancelTokenTests.swift:
    1|       |//
    2|       |//  CancelTokenTests.swift
    3|       |//  CacherTests
    4|       |//
    5|       |//  Created by Aashish Tamsya on 28/06/19.
    6|       |//  Copyright © 2019 Aashish Tamsya. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Cacher
   11|       |
   12|       |final class CancelTokenTests: XCTestCase {
   13|       |  
   14|      1|  func test_requestToken_cancel() {
   15|      1|    guard let imageURL = URL(string: "http://s75.mindvalley.us/mindvalleyacademy/media/images/teaser-video-cover.jpg") else {
   16|      0|      XCTAssert(false, "no image at url")
   17|      0|      return
   18|      1|    }
   19|      1|    let cache = Cacher.sharedCache
   20|      1|    let token = cache.download(cacheType: .memory, url: imageURL) { (object: Data?, _) in }
   21|      1|    XCTAssert(token?.cancel() != nil, "request cancelled")
   22|      1|  }
   23|       |}

/Users/aashish.tamsya/Desktop/MindValley-Challenge/CacherTests/NetworkTests/NetworkTests.swift:
    1|       |//
    2|       |//  NetworkTests.swift
    3|       |//  CacherTests
    4|       |//
    5|       |//  Created by Aashish Tamsya on 24/06/19.
    6|       |//  Copyright © 2019 Aashish Tamsya. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import Cacher
   11|       |
   12|       |final class NetworkTests: XCTestCase {
   13|      0|  func test_image_downloading_caching() {
   14|      0|    guard let imageURL = URL(string: "https://blog.hubspot.com/hubfs/image8-2.jpg"),
   15|      0|      let key = imageURL.key else {
   16|      0|        XCTAssert(false, "no image at url")
   17|      0|        return
   18|      0|    }
   19|      0|    let expectation = self.expectation(description: "Testing of downloading image and cache it.")
   20|      0|    let cache = Cacher.sharedCache
   21|      0|    _ = cache.download(cacheType: .memory, url: imageURL) { (object: Data?, _)  in
   22|      0|      cache.retrieve(from: .memory, key: key) { (data: Data?) in
   23|      0|        if let data = data {
   24|      0|          let image = UIImage(data: data)
   25|      0|          XCTAssert(image != nil, "no image in cache.")
   26|      0|        } else {
   27|      0|          XCTAssert(false, "no data from url.")
   28|      0|        }
   29|      0|        expectation.fulfill()
   30|      0|      }
   31|      0|    }
   32|      0|    waitForExpectations(timeout: 60, handler: nil)
   33|      0|  }
   34|       |  
   35|      0|  func test_performance_image_downloading_caching() {
   36|      0|    measureMetrics([.wallClockTime], automaticallyStartMeasuring: false) {
   37|      0|      guard let url = URL(string: "https://cdn.pixabay.com/photo/2016/09/01/10/23/image-1635747_960_720.jpg"),
   38|      0|        let key = url.key else {
   39|      0|          XCTAssert(false)
   40|      0|          return
   41|      0|      }
   42|      0|      let cache = Cacher.sharedCache
   43|      0|      let expectation = self.expectation(description: "Performance testing of downloading image and cache it.")
   44|      0|      startMeasuring()
   45|      0|      _ = cache.download(cacheType: .memory, url: url) { (object: Data?, _) in
   46|      0|        cache.retrieve(from: .memory, key: key) { (data: Data?) in
   47|      0|          if let data = data {
   48|      0|            let image = UIImage(data: data)
   49|      0|            XCTAssert(image != nil, "no image in cache.")
   50|      0|          } else {
   51|      0|            XCTAssert(false, "no data from url.")
   52|      0|          }
   53|      0|          expectation.fulfill()
   54|      0|        }
   55|      0|      }
   56|      0|      waitForExpectations(timeout: 60, handler: { _ in
   57|      0|        self.stopMeasuring()
   58|      0|      })
   59|      0|    }
   60|      0|  }
   61|       |}

